<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

        <!-- 扫描@Controler-->
        <context:component-scan base-package="cn.edu.swpu.met.stuteam"/>
        
        <!-- 配置处理器映射器 -->
<!--         <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
        <!-- 配置处理器适配器 -->
<!--         <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->
        <!-- 注解驱动 -->
        <!-- 
        	直接配置处理器映射器和处理器适配器比较麻烦，可以使用注解驱动来加载。
			SpringMVC使用<mvc:annotation-driven>自动加载RequestMappingHandlerMapping和RequestMappingHandlerAdapter
			可以在springmvc.xml配置文件中使用<mvc:annotation-driven>替代注解处理器和适配器的配置。
			这一步可以代替配置处理器映射器和 处理器适配器
         -->
         <!-- <mvc:annotation-driven /> -->
        <mvc:annotation-driven conversion-service="conversionServiceFactoryBean"/>
        
        <!-- 配置Conveter转换器  转换工厂 （日期、去掉前后空格）。。 -->
        <bean id="conversionServiceFactoryBean" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        	<!-- 配置 多个转换器 -->
        	<property name="converters">
        		<list>
        			<!-- <bean class="cn.edu.swpu.met.conversion.DateConveter"/>
        			<bean class="cn.edu.swpu.met.conversion.DateTimeConveter"/> -->
        			<!-- <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/> -->
        			<!-- <bean class="org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter"/> -->
        		</list>
        	</property>
        </bean>
        
        <!-- 对静态资源放行  -->
		<mvc:resources location="/css/" mapping="/css/**"/>
		<mvc:resources location="/js/" mapping="/js/**"/>
		<mvc:resources location="/fonts/" mapping="/fonts/**"/>
        
        <!--配置 视图解释器 -->
        <!-- 
        	当controller中的返回值是ModelandView时，师徒解析器生效
        	逻辑视图名需要在controller中返回ModelAndView指定，比如逻辑视图名为ItemList，则最终返回的jsp视图地址:
			“WEB-INF/jsp/itemList.jsp”
			最终jsp物理地址：前缀+逻辑视图名+后缀
         -->
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        	<!-- 配置视图名前缀  -->
        	 <property name="prefix" value=""/>
        	<!-- 配置视图名后缀 -->
        	<property name="suffix" value=".jsp"/>
        </bean>
        
        
        <!-- 解决静态资源无法被springMVC处理的问题 -->
		<mvc:default-servlet-handler />
        
        <!-- 配置拦截器 -->
		<mvc:interceptors>
			<mvc:interceptor>
				<!-- 所有的请求都进入拦截器 -->
				<mvc:mapping path="/**" />
				<!-- 配置具体的拦截器 -->
				<bean class="cn.edu.swpu.met.stuteam.handlerinterceptor.SwpuHandlerInterceptor" />
			</mvc:interceptor>
		</mvc:interceptors>
        
        
   </beans>